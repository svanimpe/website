import{_ as e,o as a,c as t,R as r}from"./chunks/framework.X3d09HAs.js";const m=JSON.parse('{"title":"Exercises 8","description":"","frontmatter":{},"headers":[],"relativePath":"exercises/exercises8.md","filePath":"exercises/exercises8.md"}'),i={name:"exercises/exercises8.md"},o=r('<h1 id="exercises-8" tabindex="-1">Exercises 8 <a class="header-anchor" href="#exercises-8" aria-label="Permalink to &quot;Exercises 8&quot;">​</a></h1><p>In this exercise series, you’ll revisit <a href="./../challenges/blackjack.html">Blackjack</a> and declare three enumerated types you can use to improve its implementation.</p><p>Before you begin, familiarize yourself with the solution project for Blackjack. You’ll use this project as your starting point.</p><h2 id="exercise-8-1" tabindex="-1">Exercise 8.1 <a class="header-anchor" href="#exercise-8-1" aria-label="Permalink to &quot;Exercise 8.1&quot;">​</a></h2><p>Declare the enumerations <code>Rank</code> and <code>Suit</code> introduced in the previous chapter. Give both a raw type of <code>String</code> and assign each case its corresponding <code>String</code> value.</p><h2 id="exercise-8-2" tabindex="-1">Exercise 8.2 <a class="header-anchor" href="#exercise-8-2" aria-label="Permalink to &quot;Exercise 8.2&quot;">​</a></h2><p>Add a computed property <code>value</code> to <code>Rank</code>. This property replaces the <code>values</code> dictionary that the solution currently uses.</p><h2 id="exercise-8-3" tabindex="-1">Exercise 8.3 <a class="header-anchor" href="#exercise-8-3" aria-label="Permalink to &quot;Exercise 8.3&quot;">​</a></h2><p>Declare an enumeration <code>Action</code> to represent the actions a player can take. These are:</p><ul><li>hit</li><li>stand</li><li>double down</li><li>split</li><li>answer yes</li><li>answer no</li></ul><h2 id="exercise-8-4" tabindex="-1">Exercise 8.4 <a class="header-anchor" href="#exercise-8-4" aria-label="Permalink to &quot;Exercise 8.4&quot;">​</a></h2><p>Add a <code>description</code> property to <code>Action</code> that describes the input expected for each action. For example, you can return <code>&quot;(h)it&quot;</code> to indicate that the player should type either <code>&quot;h&quot;</code> or <code>&quot;hit&quot;</code> to select action <code>hit</code>.</p><h2 id="exercise-8-5" tabindex="-1">Exercise 8.5 <a class="header-anchor" href="#exercise-8-5" aria-label="Permalink to &quot;Exercise 8.5&quot;">​</a></h2><p>Add an initializer to <code>Action</code> that converts the player’s input to one of the actions. Return <code>nil</code> if the input doesn’t match any of the actions.</p><h2 id="exercise-8-6" tabindex="-1">Exercise 8.6 <a class="header-anchor" href="#exercise-8-6" aria-label="Permalink to &quot;Exercise 8.6&quot;">​</a></h2><p>Improve the solution project for Blackjack using structures and enumerations, similar to what you did for <a href="./../challenges/tic-tac-toe.html">Tic-Tac-Toe</a> in <a href="./../chapters/programming-with-structures.html">Programming with Structures</a> and <a href="./../chapters/enumerations.html">Enumerations</a>.</p><p>Use the enumerations you declared in the previous exercises, identify and declare any other types you need, and give the implementation a complete overhaul.</p><p>Also, audit your types for encapsulation. Think about which members a type should expose and mark all others as private.</p>',18),c=[o];function s(n,d,l,h,u,p){return a(),t("div",null,c)}const f=e(i,[["render",s]]);export{m as __pageData,f as default};
