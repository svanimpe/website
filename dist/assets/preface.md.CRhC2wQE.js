import{V as t}from"./chunks/theme.5pNOIwrB.js";import{o as a,c as r,I as o,m as s,R as n}from"./chunks/framework.X3d09HAs.js";const i=n('<h1 id="preface" tabindex="-1">Preface <a class="header-anchor" href="#preface" aria-label="Permalink to &quot;Preface&quot;">‚Äã</a></h1><p><strong>Programming with Swift: Fundamentals</strong> is our introductory programming course. It covers the fundamental building blocks of programming, such as variables, control flow, functions, data collections, and types.</p><p>In this course, you‚Äôll learn the <a href="https://swift.org" target="_blank" rel="noreferrer">Swift</a> programming language and build fun games, such as <a href="./challenges/tic-tac-toe.html">Tic-Tac-Toe</a>, <a href="./challenges/blackjack.html">Blackjack</a>, and <a href="./challenges/yahtzee.html">Yahtzee</a>.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">‚Äã</a></h2><p>You don‚Äôt need any prior programming experience to start this course. However, we do assume some maturity and exposure to abstract concepts such as mathematics or grammar. A high school education should be sufficient.</p><h2 id="software-requirements" tabindex="-1">Software requirements <a class="header-anchor" href="#software-requirements" aria-label="Permalink to &quot;Software requirements&quot;">‚Äã</a></h2><p>Other than Swift itself, this course has no specific software requirements. You can use any of the major desktop operating systems to complete this course: macOS, Linux, and Windows. <a href="./chapters/getting-started.html">Getting Started</a> will help you set up a development environment on your computer.</p><h2 id="objectives" tabindex="-1">Objectives <a class="header-anchor" href="#objectives" aria-label="Permalink to &quot;Objectives {#objectives}&quot;">‚Äã</a></h2><p>The objectives for this course are as follows:</p><ul><li><strong>Syntax and grammar</strong>: Become fluent in writing code.</li><li><strong>Best practices</strong>: Follow conventions and adopt a common code style.</li><li><strong>Computational thinking</strong>: Solve problems by designing and implementing algorithms.</li><li><strong>Collections</strong>: Store and process data using collections.</li><li><strong>Types</strong>: Use custom types effectively and understand the differences between value types and reference types.</li><li><strong>Documentation</strong>: Document your code and familiarize yourself with the Swift Standard Library documentation.</li><li><strong>Process</strong>: Analyze a problem and design a solution before you write code.</li></ul><p>Including evaluation, this course should take approximately 150 to 180 hours to complete.</p><h2 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to &quot;Structure&quot;">‚Äã</a></h2><p>This course has four parts. Other than the first, each part consists of chapters interspersed with exercises and ending with a programming challenge:</p><ul><li><strong>Part I</strong> introduces you to computing and guides you through the process of creating your first program.</li><li><strong>Part II</strong> covers the basic building blocks of programs: expressions, statements, and functions. At the end of this part, you‚Äôll build a game of <a href="./challenges/tic-tac-toe.html">Tic-Tac-Toe</a>.</li><li><strong>Part III</strong> explains how you can store and process collections of data. Your challenge for this part is to build a game of <a href="./challenges/blackjack.html">Blackjack</a>.</li><li><strong>Part IV</strong> takes your skills to a higher level by introducing custom types. You‚Äôll then use these types to build a game of <a href="./challenges/yahtzee.html">Yahtzee</a>.</li></ul><p>Each chapter, exercise, and challenge is part of a carefully designed learning path. It‚Äôs paramount that you read the chapters in order and that you complete every exercise and challenge before moving on.</p><p>Some of the exercises and challenges may seem difficult at first ‚Äî this is intentional. Don‚Äôt give up and ask for help at the first sign of struggle. Instead, remove any distractions from your environment and focus on the problem at hand. Stick with it and take as much time as you need.</p><p>Challenging yourself with increasingly difficult problems is how you improve as a programmer. Don‚Äôt expect to learn how to program simply from reading instructions. Programming requires experience. The exercises and challenges in this course will give you that experience.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;Resources {#resources}&quot;">‚Äã</a></h2><p>The <strong>solutions bundle</strong> contains solutions for all of the exercises and challenges in this course:</p><p>‚¨áÔ∏è <a href="/solutions-bundle.zip">Download the solutions bundle</a></p><p>If you find an issue with the text, instructions, or code, please report it on our <strong>issue tracker</strong>:</p><p>üêû <a href="https://github.com/pwsacademy/pws-fundamentals-issues/issues/new/choose" target="_blank" rel="noreferrer">Report an issue</a><br> üîç <a href="https://github.com/pwsacademy/pws-fundamentals-issues/issues" target="_blank" rel="noreferrer">Known issues</a></p><h2 id="about-swift" tabindex="-1">About Swift <a class="header-anchor" href="#about-swift" aria-label="Permalink to &quot;About Swift&quot;">‚Äã</a></h2><p>Swift is a programming language developed by Apple. Swift‚Äôs unique blend of features makes it a solid choice for professional programmers as well as an excellent teaching language, which is why it was chosen for this course.</p><p>Swift is:</p><ul><li><strong>Safe</strong>: Swift has a strong focus on safety and avoids errors that are common in other languages. By learning Swift as your first language, you‚Äôll develop good programming habits and write safe code.</li><li><strong>Expressive</strong>: As a young and modern language, Swift builds on decades of experience and offers a powerful set of features. With Swift, you can get a lot done with very little code.</li><li><strong>Fast</strong>: Swift succeeds in being both expressive and fast. This unique combination of expressive power and high performance means that you can use Swift to build nearly any application.</li><li><strong>Elegant</strong>: Swift favors consistency and clarity over terseness. Compared to code written in other languages, Swift code is often easier to read and understand.</li><li><strong>Approachable</strong>: Swift follows the principle of <strong>progressive disclosure</strong>. It hides advanced features from new learners and exposes them only when you‚Äôre ready to learn about them; this makes the language much easier to learn.</li></ul><p>Swift is an open-source project, so anyone can contribute to it. As a result, Swift is rapidly growing from a language for Apple developers into a language that anyone can use.</p><h2 id="team" tabindex="-1">Team <a class="header-anchor" href="#team" aria-label="Permalink to &quot;Team&quot;">‚Äã</a></h2>',28),g=JSON.parse('{"title":"Preface","description":"","frontmatter":{},"headers":[],"relativePath":"preface.md","filePath":"preface.md"}'),l={name:"preface.md"},m=Object.assign(l,{setup(c){const e=[{avatar:"/avatars/steven.jpg",name:"Steven Van Impe",title:"Author",links:[{icon:"x",link:"https://twitter.com/pwsacademy"}]},{avatar:"/avatars/tammy.jpg",name:"Tammy Coron",title:"Editor",links:[{icon:"x",link:"https://twitter.com/Paradox927"}]}];return(u,h)=>(a(),r("div",null,[i,o(s(t),{size:"small",members:e})]))}});export{g as __pageData,m as default};
