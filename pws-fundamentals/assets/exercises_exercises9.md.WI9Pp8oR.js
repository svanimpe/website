import{_ as e,o as a,c as s,R as r}from"./chunks/framework.X3d09HAs.js";const f=JSON.parse('{"title":"Exercises 9","description":"","frontmatter":{},"headers":[],"relativePath":"exercises/exercises9.md","filePath":"exercises/exercises9.md"}'),t={name:"exercises/exercises9.md"},o=r('<h1 id="exercises-9" tabindex="-1">Exercises 9 <a class="header-anchor" href="#exercises-9" aria-label="Permalink to &quot;Exercises 9&quot;">​</a></h1><p>With these exercises, you’ll deepen your understanding of value types and reference types by drawing memory diagrams like the ones you’ve seen in the previous chapter.</p><p>You’ll compare the solution projects for <a href="./exercises8.html">Exercises 8</a> and <a href="./../chapters/classes.html">Classes</a> to see what changed when you used classes for some of the types.</p><h2 id="exercise-9-1" tabindex="-1">Exercise 9.1 <a class="header-anchor" href="#exercise-9-1" aria-label="Permalink to &quot;Exercise 9.1&quot;">​</a></h2><p>Using the solution project for <a href="./exercises8.html">Exercises 8</a>, draw a memory diagram that shows the contents of the variable <code>game</code> from <strong>main.swift</strong>. Assume the game has just started, the player has drawn K♥️ 7♠️, the dealer has 10♣ 3♥️, and the player hasn’t taken any actions.</p><p>Recall that this implementation uses only value types. Therefore, everything on your diagram should be contained within <code>game</code> as one large value. Make your diagram as detailed as possible by showing the contents of every nested value. The only exception is <code>deck.cards</code>. For this array, drawing one or two cards suffices. You can add an ellipsis (<code>...</code>) to indicate that you’ve omitted the remaining elements from the array.</p><h2 id="exercise-9-2" tabindex="-1">Exercise 9.2 <a class="header-anchor" href="#exercise-9-2" aria-label="Permalink to &quot;Exercise 9.2&quot;">​</a></h2><p>Draw an equivalent diagram using the solution project for <a href="./../chapters/classes.html">Classes</a> .</p><p>Types <code>Deck</code>, <code>Hand</code>, <code>Player</code>, and <code>Game</code> are now classes. Therefore, your diagram will have less nested values, and many variables will contain references to instances that are stored elsewhere in memory.</p>',9),i=[o];function c(n,d,h,l,m,p){return a(),s("div",null,i)}const x=e(t,[["render",c]]);export{f as __pageData,x as default};
