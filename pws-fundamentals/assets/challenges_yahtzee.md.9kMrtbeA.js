import{_ as e,o as t,c as a,R as s}from"./chunks/framework.X3d09HAs.js";const y=JSON.parse('{"title":"Yahtzee","description":"","frontmatter":{},"headers":[],"relativePath":"challenges/yahtzee.md","filePath":"challenges/yahtzee.md"}'),n={name:"challenges/yahtzee.md"},o=s('<h1 id="yahtzee" tabindex="-1">Yahtzee <a class="header-anchor" href="#yahtzee" aria-label="Permalink to &quot;Yahtzee&quot;">​</a></h1><p>As your third and final challenge, you’ll implement a game of <strong>Yahtzee</strong>.</p><p>You’ll complete this challenge using the structured approach described in <a href="./blackjack.html">Blackjack</a>. You’ll be guided through the phases of the software development process: analysis, design, and implementation, but the explanations won’t be as detailed as they were previously. Please refer to the previous challenge if you need a refresher.</p><p>As always, a solution project is provided for you to compare your work against.</p><h2 id="analysis" tabindex="-1">Analysis <a class="header-anchor" href="#analysis" aria-label="Permalink to &quot;Analysis&quot;">​</a></h2><p>In the software <strong>analysis</strong> phase, you specify the <strong>requirements</strong> for your application. The requirements for this challenge are to implement the rules of Yahtzee and to support multiple players. You’ll use a terminal to interface with the players.</p><p>Start by learning the rules of the game and answer the following questions:</p><ul><li>How does re-rolling work?</li><li>How is each field scored?</li><li>What is the upper section bonus?</li><li>What happens when a player rolls multiple Yahtzees in a single game?</li></ul><p>Once you understand how the game works, write down some <strong>scenarios</strong> that describe in detail what actions the players take and what information the game displays.</p><p>Together, the requirements and scenarios specify what you expect from your application. In the next phase, you’ll consider how to implement them.</p><h2 id="iterative-development" tabindex="-1">Iterative development <a class="header-anchor" href="#iterative-development" aria-label="Permalink to &quot;Iterative development&quot;">​</a></h2><p>As with the previous challenge, you’ll build your game incrementally in iterations. Here are the suggested iterations:</p><ol><li>Implement a single turn of rolling and re-rolling the dice. Don’t worry about scoring or multiple players just yet.</li><li>Add scoring for the thirteen fields so that you can play a complete turn.</li><li>Add the upper section bonus, bonus Yahtzees, and jokers. Also, add multiple turns so that you can play a complete game.</li><li>Extend the game to support multiple players.</li></ol><p>Assign your requirements and scenarios to these iterations, then start the first design phase.</p><h2 id="design" tabindex="-1">Design <a class="header-anchor" href="#design" aria-label="Permalink to &quot;Design&quot;">​</a></h2><p>In the software <strong>design</strong> phase, you consider the requirements and scenarios for each iteration and come up with a design that you can implement. For the first design phase, consider only the requirements and scenarios for the first iteration.</p><p>For each scenario, write an <strong>outline</strong> of its implementation in pseudocode. This pseudocode can be anything from plain English to valid Swift. The closer your outlines are to actual code, the easier they’ll be to implement.</p><p>Next, use your outlines to identify the <strong>types</strong> you need. Find out what data you need to store and which operations you need to perform. Then, group these into types with a coherent set of properties and methods.</p><p>Also, consider how you <strong>encapsulate</strong> each type member. Use <code>private</code> or <code>private(set)</code> to encapsulate members that shouldn’t be exposed, and use nested types or functions where appropriate.</p><p>With this preparation done, you’re ready to write some code.</p><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>Start by implementing the scenarios for the first iteration. First, implement the types you’ve designed, then implement the scenarios using their outline as a starting point.</p><p>When you’re done, look for opportunities to improve your code. Update your design to match these changes, then move on to the next iteration.</p><p>Continue designing and implementing one iteration at a time until you’ve worked your way through all of the requirements and scenarios.</p><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h2><p>If you want to become a software developer, you have to understand the importance of documenting your work. Proper documentation helps developers understand your code, which is important even when working on your own. So much thought goes into code that it’s easy to forget the details of how it works. You’ll want proper documentation when you revisit your code in the future to fix bugs or add features.</p><p>Saving your analysis and design documents for future reference is a good start. These documents describe what your application does and provide a high-level overview of how it works.</p><p>In your implementation, you use <strong>documentation comments</strong> to document your types and their members. Here’s an example from the Standard Library:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Returns the first index where the specified value appears in the</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// collection.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// After using `firstIndex(of:)` to find the position of a particular element</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// in a collection, you can use it to access the element by subscripting.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// - Parameter element: An element to search for in the collection.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// - Returns: The first index where `element` is found. If `element` is not</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///   found in the collection, returns `nil`.</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> firstIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span></code></pre></div><p>You start each line of a documentation comment with a triple-slash (<code>///</code>). You can also use <code>/**</code> and <code>*/</code> to create a multiline documentation comment, but a triple-slash per line is more common.</p><p>Documentation comments use <strong><a href="https://swift.org/documentation/docc/" target="_blank" rel="noreferrer">DocC</a></strong> to support rich formatting. The previous example demonstrates some of these formatting features:</p><ul><li>Empty lines will separate paragraphs.</li><li>The first paragraph provides a summary of the type or member. Subsequent paragraphs offer additional information.</li><li>Backticks (<code>`</code>) format text as code; use them around the names of variables, functions, types, and so on.</li><li>A <code>Parameter</code> section describes a function’s parameter.</li><li>A <code>Returns</code> section describes a function’s return value.</li></ul><p>Because of their rich formatting, documentation comments are useful outside of your code as well. They enable the quick help feature of your editor, and you can export them to other formats, such as a website. In fact, the Swift Standard Library website is largely generated from documentation comments.</p><p>This doesn’t mean you should only use documentation comments from now on. Think of documentation comments as part of your design: they document your types and their members. You still use regular comments to clarify the implementation details.</p><p>It’s time to add documentation comments to your code. Only when your work is adequately documented can you consider your challenge completed.</p><h2 id="evaluation" tabindex="-1">Evaluation <a class="header-anchor" href="#evaluation" aria-label="Permalink to &quot;Evaluation&quot;">​</a></h2><p>Congratulations on completing the final challenge.</p><p>The goal of this challenge was to design and implement an application using custom types. These types add structure and encapsulation to your code, which results in a smoother development experience. Of course, that also depends on the quality of your analysis and design work.</p><p>If you haven’t already done so, compare your solution with the one from the solutions bundle and learn from the differences.</p><h2 id="up-next" tabindex="-1">Up next <a class="header-anchor" href="#up-next" aria-label="Permalink to &quot;Up next&quot;">​</a></h2><p>This challenge completes the learning process for this course. The next chapter revisits the course objectives and discusses how the course is evaluated.</p>',41),i=[o];function r(l,h,p,d,c,u){return t(),a("div",null,i)}const g=e(n,[["render",r]]);export{y as __pageData,g as default};
