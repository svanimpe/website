import{_ as i,o as s,c as a,R as e}from"./chunks/framework.X3d09HAs.js";const u=JSON.parse('{"title":"Optionals","description":"","frontmatter":{},"headers":[],"relativePath":"chapters/optionals.md","filePath":"chapters/optionals.md"}'),t={name:"chapters/optionals.md"},n=e(`<h1 id="optionals" tabindex="-1">Optionals <a class="header-anchor" href="#optionals" aria-label="Permalink to &quot;Optionals&quot;">​</a></h1><p>In <a href="./../challenges/tic-tac-toe.html#input">Tic-Tac-Toe</a>, you used the <code>readLine</code> function to read input from the terminal:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span></code></pre></div><p>The exclamation point (<code>!</code>) in this code indicates that <code>readLine</code> returns an <strong>optional</strong>. This chapter explains what optionals are and how you can use them safely.</p><h2 id="optional-types-and-values" tabindex="-1">Optional types and values <a class="header-anchor" href="#optional-types-and-values" aria-label="Permalink to &quot;Optional types and values&quot;">​</a></h2><p>Swift requires that you initialize all constants and variables before using them. This is an important safety feature. Once initialized, constants and variables always hold a value. If you need to represent the absence of a value, you need an optional.</p><p>An optional wraps an existing value and appends a question mark (<code>?</code>) to the type. For example:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span></code></pre></div><p>Here, <code>code</code> is an optional <code>Int</code> (an <code>Int?</code>) and <code>error</code> is an optional <code>String</code> (a <code>String?</code>).</p><p>The values you can assign to an optional are either the values of the wrapped type or the special literal <strong><code>nil</code></strong>, which indicates the absence of a value:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;something went wrong&quot;</span></span></code></pre></div><p>You can only assign <code>nil</code> to optionals; regular types don’t allow this.</p><p>Optionals start out as <code>nil</code> and can be assigned <code>nil</code> at any point in their lifetime. Consequently, you can’t use an optional where a regular value is expected:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line highlighted error"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error)  </span></span></code></pre></div><p>This code is invalid because the string concatenation operator (<code>+</code>) requires a value of type <code>String</code>. It doesn’t allow a <code>String?</code>, as that may contain <code>nil</code>.</p><p>You must <strong>unwrap</strong> an optional if you want to use its value. The following sections explain how you can do that.</p><h2 id="optional-binding" tabindex="-1">Optional binding <a class="header-anchor" href="#optional-binding" aria-label="Permalink to &quot;Optional binding&quot;">​</a></h2><p>The safest way to unwrap an optional is to use <strong>optional binding</strong>, which is a special control flow condition. Here’s an example:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No input available.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In this example, <code>let input = readLine()</code> is the optional binding. Here’s how this binding works:</p><ol><li>The return type of <code>readLine</code> is <code>String?</code>. The function returns either the next line of input or <code>nil</code> if it reaches the end of its input.</li><li>The binding attempts to unwrap this <code>String?</code> and assign its value to a local constant <code>input</code>.</li><li>The type of <code>input</code> is <code>String</code>. It holds an unwrapped value, not an optional.</li><li>If <code>readLine</code> returns a <code>String</code>, the binding succeeds, and the <code>if</code> statement executes its body. Inside this body, you can access the unwrapped value <code>input</code>.</li><li>If <code>readLine</code> returns <code>nil</code>, the binding fails, and the <code>if</code> statement executes its <code>else</code> clause instead.</li></ol><p>Optional binding isn’t exclusive to the <code>if</code> statement; other control flow statements support it too. Here’s an example that uses optional binding in a <code>while</code> statement:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This code prints out each line of input it reads. The loop stops when <code>readLine</code> reaches the end of its input and returns <code>nil</code>.</p><h3 id="multiple-bindings" tabindex="-1">Multiple bindings <a class="header-anchor" href="#multiple-bindings" aria-label="Permalink to &quot;Multiple bindings&quot;">​</a></h3><p>You can unwrap multiple optionals in a single statement by using a comma to separate the bindings. For example:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Recall from <a href="./../challenges/tic-tac-toe.html#input">Tic-Tac-Toe</a> that you use <code>Int(_:)</code> to convert a string to an integer. This function has a return type of <code>Int?</code> and returns <code>nil</code> if it can’t perform the conversion. The binding <code>let number = Int(input)</code> unwraps this optional. If the input was an integer, the binding succeeds, and the number is printed.</p><p>This example also shows that you can use unwrapped values in subsequent conditions — the second binding uses <code>input</code>, which was declared in the first binding.</p><h3 id="mixed-conditions" tabindex="-1">Mixed conditions <a class="header-anchor" href="#mixed-conditions" aria-label="Permalink to &quot;Mixed conditions&quot;">​</a></h3><p>You can use optional binding and Boolean conditions in the same statement, again using a comma as a separator:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code, code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encountered error </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(code)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This example checks if a negative code is set, and if so, prints an error message.</p><p>The example also shows the common practice of unwrapping an optional into a constant with the same name. Recall from <a href="./control-flow-booleans.html#shadowing">Control Flow and Booleans</a> that a local constant or variable can shadow an existing constant or variable of the same name. That’s what’s happening here. In the body of the <code>if</code> statement, <code>code</code> and <code>error</code> refer to the unwrapped constants, not to the optionals declared earlier.</p><p>In fact, this is so common that Swift has a shorthand for it:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code, code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encountered error </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(code)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(error)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Here, the compiler assumes that <code>code</code> and <code>error</code> unwrap optionals of the same name, and it completes the bindings for you.</p><h2 id="forced-unwrapping" tabindex="-1">Forced unwrapping <a class="header-anchor" href="#forced-unwrapping" aria-label="Permalink to &quot;Forced unwrapping&quot;">​</a></h2><p>When you’re sure an optional is not <code>nil</code>, you can use the <strong>force-unwrap operator</strong> (<code>!</code>) to unwrap it:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span></code></pre></div><p>This unwraps the <code>String?</code> returned by <code>readLine</code> and assigns it to <code>input</code>.</p><p>The force-unwrap operator is a unary <strong>postfix</strong> operator. You write it after an optional value to unwrap that value. This is how you can tell the force-unwrap operator from the Boolean NOT operator, which is a prefix operator.</p><p>Be careful when using the force-unwrap operator. If you force-unwrap an optional that is <code>nil</code>, your program will crash. Therefore, you should only use this operator when you expect the optional to have a value, and <code>nil</code> can only be the result of a programming error. In this case, a crash is acceptable as it helps you detect and fix the error before you ship the program to your users.</p><p>In the case of <code>readLine</code>, you should only force-unwrap input you receive from the terminal. When reading from a file, always use optional binding.</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>The user can type <strong>Ctrl+D</strong> (on macOS and Linux) or <strong>Ctrl+Z</strong> (on Windows) at the terminal to send an end-of-file signal, which will cause <code>readLine</code> to return <code>nil</code>. However, this also disconnects your program from the terminal, so there is little you can do to protect against it. In this case, it’s better to crash and inform the user that something went wrong than to silently ignore the error and leave the user typing at a disconnected terminal.</p></div><h2 id="nil-coalescing-operator" tabindex="-1">Nil-coalescing operator <a class="header-anchor" href="#nil-coalescing-operator" aria-label="Permalink to &quot;Nil-coalescing operator&quot;">​</a></h2><p>The <strong>nil-coalescing operator</strong> (<code>??</code>) safely unwraps an optional by replacing <code>nil</code> with a default value. For example:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>This code unwraps the return value of <code>Int(input)</code> and assigns it to <code>number</code>. If <code>Int(input)</code> returns <code>nil</code>, the code assigns a default value of 0 instead.</p><p>The nil-coalescing operator is a shorthand for a longer expression that uses the ternary operator (<code>?:</code>):</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>Both expressions are equivalent, but the one that uses the nil-coalescing operator is much easier to read and understand.</p><h2 id="up-next" tabindex="-1">Up next <a class="header-anchor" href="#up-next" aria-label="Permalink to &quot;Up next&quot;">​</a></h2><p>This chapter covered the basics of using optionals. You’ll continue learning about optionals in <a href="./wrapping-up.html#optionals">Wrapping Up</a>, where you’ll explore some of their advanced features. But first, practice the basics by solving the upcoming exercises.</p>`,54),o=[n];function l(p,h,r,d,c,k){return s(),a("div",null,o)}const y=i(t,[["render",l]]);export{u as __pageData,y as default};
