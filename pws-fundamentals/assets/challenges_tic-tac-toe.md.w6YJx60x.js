import{_ as s,D as n,o as i,c as o,I as l,k as e,a,R as r}from"./chunks/framework.X3d09HAs.js";const v=JSON.parse('{"title":"Tic-Tac-Toe","description":"","frontmatter":{},"headers":[],"relativePath":"challenges/tic-tac-toe.md","filePath":"challenges/tic-tac-toe.md"}'),p={name:"challenges/tic-tac-toe.md"},h=e("h1",{id:"tic-tac-toe",tabindex:"-1"},[a("Tic-Tac-Toe "),e("a",{class:"header-anchor",href:"#tic-tac-toe","aria-label":'Permalink to "Tic-Tac-Toe"'},"​")],-1),c=e("p",null,[a("To conclude Part II, you’ll apply everything you’ve learned so far to build a game of Tic-Tac-Toe. In this game, players take turns claiming a spot on a 3x3 grid and marking it with their symbol: "),e("strong",null,"X"),a(" or "),e("strong",null,"O"),a(". The first player to fill a row, column, or diagonal with their symbol wins the game:")],-1),d=r(`<h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><p>This section describes how your game should work. Your output needn’t be identical, but you should have the same functionality.</p><p>When the game starts, it greets the players with a welcome message and an empty game board (the 3x3 grid):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Welcome to Tic-Tac-Toe!</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 1 | 2 | 3</span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span> 4 | 5 | 6</span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span> 7 | 8 | 9</span></span></code></pre></div><p>The positions on the board are numbered for clarity. If you prefer an empty board, you can replace the numbers with spaces.</p><p>Next, the game picks a random starting player and asks this player to select a position:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Player O, it’s your turn.</span></span>
<span class="line"><span>Select a position (1-9): 2</span></span></code></pre></div><p>The game then marks this position with the player’s symbol and shows the board as confirmation:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> 1 | O | 3</span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span> 4 | 5 | 6</span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span> 7 | 8 | 9</span></span></code></pre></div><p>Play now moves to the other player, who is asked to select a position. This process repeats itself until the game ends. The game then prints the final board and the winner:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> X | O | O</span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span> 4 | X | O</span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span> 7 | 8 | X</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Player X has won!</span></span></code></pre></div><p>Finally, the game asks the players if they want to play again:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Would you like to play again? (y/n): y</span></span></code></pre></div><p>If they answer <strong>y</strong>, the game starts over. If they answer <strong>n</strong>, the program ends.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>To complete this challenge, you’ll need to learn a few new things:</p><ul><li>How to read input from the terminal</li><li>How to generate random values</li></ul><h3 id="input" tabindex="-1">Reading input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;Reading input {#input}&quot;">​</a></h3><p>The Standard Library includes a <code>readLine</code> function that reads input and returns a <code>String</code>. By default, <code>readLine</code> reads from the terminal, but it can also read from a file.</p><p>You call <code>readLine</code> as follows:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span></code></pre></div><p>When reading from a file, <code>readLine</code> may run out of input, in which case it can’t return a <code>String</code>. The exclamation point after the function call indicates that you acknowledge this risk but that you assume everything will be fine. This assumption is fairly safe when reading from a terminal, because <code>readLine</code> waits for more input from the user.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The user can type <strong>Ctrl+D</strong> (on macOS and Linux) or <strong>Ctrl+Z</strong> (on Windows) to send an end-of-file signal to your program, which will cause <code>readLine</code> to crash.</p></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>The exclamation point is part of a feature called <a href="./../chapters/optionals.html"><strong>Optionals</strong></a> that you’ll learn about in Part III.</p></div><p>If you want to read a number, you can convert the <code>String</code> you get from <code>readLine</code> to the desired type. Here’s how you convert it to an <code>Int</code>:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span></code></pre></div><p>Again, note the exclamation point. If the input is not an integer, the conversion from <code>String</code> to <code>Int</code> will fail and crash your program.</p><h3 id="random-values" tabindex="-1">Random values <a class="header-anchor" href="#random-values" aria-label="Permalink to &quot;Random values&quot;">​</a></h3><p>Most games involve randomness. Fortunately, Swift makes it easy to generate random values. Types such as <code>Int</code>, <code>Double</code>, and <code>Bool</code> include a <code>random</code> function that returns a random value of that type.</p><p>For example, here’s how you generate a random integer between one and ten, and a random Boolean:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomInt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomBool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>This section guides you through the process of building your game. As this is your first challenge, you’ll get some help, such as how to split your code into functions and how to group these functions into files. However, this isn’t a tutorial, so implementing the functions is entirely up to you.</p><p>Working on a project of this size can feel overwhelming. Don’t worry about how much time you need or if you get stuck and have to start over. The important part is not to give up; keep at it until you have a working solution.</p><h3 id="project-setup" tabindex="-1">Project setup <a class="header-anchor" href="#project-setup" aria-label="Permalink to &quot;Project setup&quot;">​</a></h3><p>Start by creating an executable package using the Swift Package Manager. Refer back to <a href="./../chapters/getting-started.html">Getting Started</a> if you need a refresher on how to do that.</p><p>Delete the source file that came with your project, and create the following files instead:</p><ul><li><strong>main.swift</strong> will start the game.</li><li><strong>input.swift</strong> will hold functions that read input.</li><li><strong>board.swift</strong> will hold functions and variables related to the game board.</li><li><strong>game.swift</strong> will hold the core functionality of the game, such as taking turns and checking if the game is over.</li></ul><p>Using multiple files and functions keeps your code manageable. Programs can quickly get out of hand if you put all your code in a single file. Splitting your code into smaller parts lets you focus on one part at a time.</p><h3 id="the-game-board" tabindex="-1">The game board <a class="header-anchor" href="#the-game-board" aria-label="Permalink to &quot;The game board&quot;">​</a></h3><p>The first part you should implement is the game board. In <strong>board.swift</strong>, do the following:</p><ol><li>Declare one or more variables to hold the state of the board (which player has claimed which position).</li><li>Declare a function to print the board.</li></ol><p>Call this function from <strong>main.swift</strong> and run the program to try it out.</p><h3 id="taking-a-turn" tabindex="-1">Taking a turn <a class="header-anchor" href="#taking-a-turn" aria-label="Permalink to &quot;Taking a turn&quot;">​</a></h3><p>Next, implement taking a turn.</p><p>In <strong>input.swift</strong>, declare a function that asks the player to select a position. If the player enters an invalid number or an already claimed position, the function should repeat the question until the player enters a valid position.</p><p>In <strong>game.swift</strong>, declare a function to take a single turn. Use the previous function to read a position, then mark this position on the board.</p><p>In <strong>main.swift</strong>, take a few turns and print the board after every turn to confirm the player’s selection.</p><h3 id="alternating-players" tabindex="-1">Alternating players <a class="header-anchor" href="#alternating-players" aria-label="Permalink to &quot;Alternating players&quot;">​</a></h3><p>The next step is to alternate the players.</p><p>In <strong>game.swift</strong>, add a variable to keep track of the current player. Then, declare a function to switch between the players.</p><p>In <strong>main.swift</strong>, switch the current player after every turn.</p><h3 id="ending-the-game" tabindex="-1">Ending the game <a class="header-anchor" href="#ending-the-game" aria-label="Permalink to &quot;Ending the game&quot;">​</a></h3><p>You’re almost ready to play a full game. The last remaining issue is to determine when the game is over.</p><p>In <strong>board.swift</strong>, declare a function that checks if the board is full.</p><p>In <strong>game.swift</strong>, declare a function that checks if the current player completed a row, column, or diagonal.</p><p>With these functions in place, you’re ready to add a game loop.</p><p>Still in <strong>game.swift</strong>, declare a function that plays an entire game. This function contains a loop that lets the players take turns until the board is full, or until a player makes three-in-a-row. When the game is over, print the result. You may need additional variables to support this function.</p><p>When you’re done, call your function from <strong>main.swift</strong> to try it out.</p><h3 id="playing-multiple-games" tabindex="-1">Playing multiple games <a class="header-anchor" href="#playing-multiple-games" aria-label="Permalink to &quot;Playing multiple games&quot;">​</a></h3><p>There’s only one requirement left to implement: when the game ends, the players should be able to start over and play a new game.</p><p>In <strong>input.swift</strong>, declare a function that asks a yes/no question.</p><p>In <strong>board.swift</strong>, declare a function to reset the board to its initial state.</p><p>In <strong>game.swift</strong>, declare a function to initialize or reset the game, and call this function before you start the game loop.</p><p>Finally, modify <strong>main.swift</strong> to support playing multiple games.</p><h2 id="evaluation" tabindex="-1">Evaluation <a class="header-anchor" href="#evaluation" aria-label="Permalink to &quot;Evaluation&quot;">​</a></h2><p>Congratulations on completing the first challenge. If it felt like a struggle at times, that’s normal. The goal of this challenge is not only to practice what you’ve learned so far, but also to prepare you for what’s coming next. The experience you’ve gained here will help you understand the topics in the upcoming chapters.</p><p>In fact, some of these chapters use the solution for this challenge as a starting point. This solution is as much a part of this course as the chapters, exercises, and challenges, so study it carefully. Compare it to your solution and learn from the differences.</p><h2 id="up-next" tabindex="-1">Up next <a class="header-anchor" href="#up-next" aria-label="Permalink to &quot;Up next&quot;">​</a></h2><p>Take some well-deserved time off to rest and recharge, then continue to Part III, where you’ll learn how to store and process collections of data.</p>`,70);function u(g,m,k,y,f,b){const t=n("Image");return i(),o("div",null,[h,c,l(t,{src:"/images/tic-tac-toe/example.png",alt:"A completed game of Tic-Tac-Toe",width:"181",height:"180"}),d])}const T=s(p,[["render",u]]);export{v as __pageData,T as default};
